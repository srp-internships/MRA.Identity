@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@layout MainLayout
@inject IAuthService AuthService
@inject IContentService ContentService
@inject NavigationManager NavigationManager

<MudGrid Justify="Justify.Center" Class="align-items-center">
    <MudItem xs="12" sm="8" md="6" lg="3">
        <EditForm Model="@_loginCommand" OnValidSubmit="OnValidSubmit">
            <FluentValidationValidator/>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderActions>
                        <ToolBarSettingsButtons/>
                    </CardHeaderActions>
                    <CardHeaderContent>
                        <div class="d-flex flex-grow-1">
                            <div class="flex-none d-flex justify-content-center">
                                <a href="">
                                    <MudImage Src="/images/srp_icon.png" Height="45"/><br/>
                                </a>
                            </div>
                            <div class="flex-initial d-flex py-1">
                                <MudText Typo="Typo.h4">
                                    <strong>@ContentService["SignIn:SignIn"]</strong>
                                </MudText>
                            </div>
                        </div>
                        <MudText>
                            @ContentService["SignIn:LabelDontAccount"] <MudLink Href="@($"registration?callback={_callback}&applicationId={_applicationId}")"> @ContentService["SignIn:LinkSignUp"]</MudLink>
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="@ContentService["SignIn:UserName"]"
                                  @bind-Value="_loginCommand.Username" For="@(() => _loginCommand.Username)" ErrorText=""/>

                    <MudTextField Label="@ContentService["SignIn:Password"]"
                                  @bind-Value="_loginCommand.Password" For="@(() => _loginCommand.Password)" InputType="InputType.Password"/>
                    <br/>
                    <MudText >
                        @ContentService["SignIn:LabelForgot"] <MudLink href="/resetPassword">@ContentService["SignIn:LinkReset"]</MudLink>
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <ProgressTaskButton OnClick="@OnValidSubmit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" FullWidth="true">
                        <MudText>@ContentService["SignIn:SignIn"]</MudText>
                    </ProgressTaskButton>
                </MudCardActions>
                <div style="padding:5px">
                    <div style="text-align: center;">
                        @* <ExternalLoginCard Title="Continue With"/> *@

                    </div> <br/>
                </div>
            </MudCard>

        </EditForm>

    </MudItem>
</MudGrid>


@code {
    private readonly LoginUserCommand _loginCommand = new();
    private string _callback = string.Empty;
    private Guid _applicationId;

    private async Task OnValidSubmit()
    {
        await AuthService.LoginUserAsync(_loginCommand);
    }

    protected override void OnInitialized()
    {
        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(currentUri.Query);
        if (query.TryGetValue("callback", out var callback))
            _callback = callback;
        if (query.TryGetValue("applicationId", out var applicationId))
            if (!Guid.TryParse(applicationId, out _applicationId))
                NavigationManager.NavigateTo("/notfound");
        _loginCommand.ApplicationId = _applicationId;
        _loginCommand.CallBackUrl = _callback;
        StateHasChanged();
    }

}