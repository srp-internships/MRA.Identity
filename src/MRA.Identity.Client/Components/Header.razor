@using MRA.Identity.Client.Components.Dialogs
@using MudBlazor
@using Anchor = MudBlazor.Anchor
@using Breakpoint = MudBlazor.Breakpoint
@using Color = MudBlazor.Color
@using DividerType = MudBlazor.DividerType
@using Microsoft.FeatureManagement
@using Size = MudBlazor.Size
@using MRA.Identity.Client.Services.Profile
@using MRA.BlazorComponents.DynamicPages.Components
@inject LayoutService LayoutService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IFeatureManager FeatureManager
@inject IDialogService DialogService
@inject ILocalStorageService LocalStorage

<MudToolBar Class="toolbar-fixed-blur">
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Icon="@Icons.Material.Filled.Notes" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
    </MudHidden>
    <a href="">
        <MudHidden Breakpoint="Breakpoint.MdAndDown">
            <MudStack Row="true">
                <MudItem Style="padding-right:5px;">
                    <MudImage src="./images/srp_icon.png" Style="width: 50px"/>
                </MudItem>
                <MudItem Style="padding-left:0; margin-right: 40px;">
                    <MudText Style="font-size: 21.5px;">
                        <b>SILK ROAD</b>
                    </MudText>
                    <MudText Style="margin-top: -10px;">
                        <small>
                            <b>PROFESSIONALS</b>
                        </small>
                    </MudText>
                </MudItem>
            </MudStack>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.LgAndUp">
            <MudStack Row="true">
                <MudItem Style="padding-right:5px;">
                    <MudImage src="./images/srp_icon.png" Style="width: 30px"/>
                </MudItem>
                <MudItem Style="padding-left:0; margin-right: 40px;">
                    <MudText Style="font-size: 21.5px;">
                        <b>SRP</b>
                    </MudText>
                </MudItem>
            </MudStack>
        </MudHidden>
    </a>
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <CascadingAuthenticationState>
            <AuthorizeView>
                <MudButton Href="/" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Profile)">
                    <MudText>
                        <b>@ContentService["Profile:MyProfile"]</b>
                    </MudText>
                </MudButton>
            </AuthorizeView>
            <AuthorizeView Roles="ApplicationAdmin, SuperAdmin">
                <MudButton Color="Color.Inherit" Variant="Variant.Text" Href="/UserManager" Class="@GetActiveClass(DocPages.UserManager)">
                    <MudText>
                        <b>User manager</b>
                    </MudText>
                </MudButton>
                <MudButton Color="Color.Inherit" Variant="Variant.Text" Href="/EmailTemplates" Class="@GetActiveClass(DocPages.UserManager)">
                    <MudText>
                        <b>Email templates</b>
                    </MudText>
                </MudButton>
            </AuthorizeView>
        </CascadingAuthenticationState>
        <MudButton Href="@Configuration["Platforms:Academy"]" Target="_blank" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Academy)">
            <MudText>
                <b>@ContentService["Header:Academy"] </b>
            </MudText>
        </MudButton>

        <MudButton Href="@($"{Configuration["Platforms:Jobs"]}{token}")" Color="Color.Inherit" Variant="Variant.Text">
            <MudText>
                <b>@ContentService["Header:Jobs"] </b>
            </MudText>
        </MudButton>
        <DynamicHeaderButtons Application="Identity"/>

    </MudHidden>
    <MudSpacer/>
    <MudHidden Breakpoint="Breakpoint.Xs">
        @if (_betaVersion)
        {
            <MudChip Color="Color.Primary">Beta</MudChip>
        }
        <MudDivider Vertical="true" DividerType="DividerType.Middle" FlexItem="true" Class="mx-4 my-4"/>
        <ToolBarSettingsButtons/>
    </MudHidden>
</MudToolBar>

<MudDrawer @bind-Open="@_open" Anchor="Anchor.Start" Elevation="2" Style="position:fixed;height: 100%; top:0;">
    <MudToolBar Dense="true" Class="docs-gray-bg">
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        <MudSpacer/>
        <ToolBarSettingsButtons/>
    </MudToolBar>

    <MudNavMenu Rounded="true" Dense="true" Color="Color.Primary" Class="pa-2">
        <MudNavLink Match="NavLinkMatch.All" Href="/" Target="_blank">@ContentService["Profile:MyProfile"]</MudNavLink>
        <CascadingAuthenticationState>
            <AuthorizeView Roles="ApplicationAdmin">
                <MudNavLink Href="/UserManager">
                    <MudText>
                        <b>User manager</b>
                    </MudText>
                </MudNavLink>
            </AuthorizeView>
        </CascadingAuthenticationState>
        <MudNavLink Match="NavLinkMatch.All" Href="@Configuration["Platforms:Academy"]" Target="_blank">@ContentService["Header:Academy"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="@($"{Configuration["Platforms:Jobs"]}{token}")" Target="_blank">@ContentService["Header:Jobs"]</MudNavLink>
        <DynamicHeaderNavLinks Application="Identity"/>
    </MudNavMenu>
    @if (_betaVersion)
    {
        <MudChip Color="Color.Primary">Beta</MudChip>
    }
</MudDrawer>

@code {
    bool _open = false;
    private string token = "";
    private bool _betaVersion;

    void ToggleDrawer()
    {
        _open = !_open;
    }

    private string _currentPage;

    protected override async Task OnInitializedAsync()
    {
        _betaVersion = await FeatureManager.IsEnabledAsync(FeatureFlags.BetaVersion);
        var authToken = await LocalStorage.GetItemAsync<JwtTokenResponse>("authToken");
        if (authToken != null)
            token = $"?atoken={authToken.AccessToken}&rtoken={authToken.RefreshToken}&vdate={authToken.AccessTokenValidateTo}";
        StateHasChanged();
        NavigationManager.LocationChanged += HandleLocationChanged;
        await base.OnInitializedAsync();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        _currentPage = DocPages.GetPageFromUrl(NavigationManager.Uri);
        StateHasChanged();
    }

    private string GetActiveClass(string page)
    {
        return page == _currentPage ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

}