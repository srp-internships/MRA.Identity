@using FluentValidation
@using Microsoft.IdentityModel.Tokens
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {

    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] IConfiguration Configuration { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ContentService.InitializeCultureAsync();
        var lang = await GetLanguageFromLocalStorageOrDefault();
        SetValidatorOptionsCulture(lang);
    }

    private async Task<string> GetLanguageFromLocalStorageOrDefault()
    {
        var lang = await LocalStorageService.GetItemAsStringAsync("ApplicationCulturesNames");
        return lang.IsNullOrEmpty() ? Configuration["FeatureManagement:DefaultLanguage"] : lang;
    }

    private void SetValidatorOptionsCulture(string lang)
    {
        // ValidatorOptions.Global.LanguageManager = new CustomLanguageManager();
        ValidatorOptions.Global.LanguageManager.Culture = GetCultureInfo(lang);
        ValidatorOptions.Global.DisplayNameResolver = (type, member, expression) =>
            member is not null ? ContentService[$"FltValidator:{member.Name}"] : null;
    }

    private CultureInfo GetCultureInfo(string lang)
    {
        switch (lang)
        {
            case "Ru":
            case "ru-RU":
                return new CultureInfo(ApplicationCulturesNames.Ru);
            case "En":
            case "en-EN":
                return new CultureInfo(ApplicationCulturesNames.En);
            case "Tj":
                return new CultureInfo(ApplicationCulturesNames.Tj);
            default:
                return ValidatorOptions.Global.LanguageManager.Culture;
        }
    }


}