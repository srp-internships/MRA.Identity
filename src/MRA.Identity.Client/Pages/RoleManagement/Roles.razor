@page "/Roles"
@using MRA.Identity.Client.Services.Roles
@using MRA.Identity.Application.Contract.ApplicationRoles.Responses
@using MRA.Identity.Client.Pages.RoleManagement.Components
@using MRA.Identity.Application.Contract.ApplicationRoles.Commands
@inject IRoleService RoleService
@inject IDialogService DialogService
<Header></Header>
<CascadingAuthenticationState>
    <AuthorizeView Roles="SuperAdmin" Context="_">
        <Authorized>
            <MudItem xl="12" xs="12" sm="12">
                <MudStack Row="true">
                    <MudText Typo="Typo.h5"><b>@ContentService["Roles:Role"]</b></MudText>
                    <MudSpacer/>
                    <MudButton OnClick="@(async () => await CreateAsync())" Color="Color.Primary" Variant="Variant.Filled">
                        <MudText> @ContentService["Roles:CreateNewRole"]</MudText>
                    </MudButton>
                </MudStack>
            </MudItem>
            <br>
            <MudTable Hover="true" Items="_roles" Breakpoint="Breakpoint.Xs" @ref="_table" Dense="true">
                <HeaderContent>
                    <MudTh Style="width: 100%">
                        @ContentService["Roles:Role"]
                    </MudTh>
                    <MudTh>
                        @ContentService["Roles:Edit"]
                    </MudTh>
                    <MudTh>
                        @ContentService["Roles:Delete"]
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudText>@context.Name</MudText>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(async () => await EditAsync(context.Name, context.Slug))"></MudIconButton>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="@(async () => await DeleteAsync(context.Slug))"></MudIconButton>
                    </MudTd>

                </RowTemplate>
                <NoRecordsContent>
                    <MudText>@ContentService["UserManager:Nomatchingrecords"]</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>@ContentService["UserManager:Loading"]</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>

        </Authorized>
        <NotAuthorized>
            <MudText Typo="Typo.h2">Page is Not Found!</MudText>
        </NotAuthorized>
    </AuthorizeView>

</CascadingAuthenticationState>

@code{

    private List<RoleNameResponse> _roles = [];
    private MudTable<RoleNameResponse> _table;

    protected override async Task OnInitializedAsync()
    {
        _roles = await RoleService.GetRoles();
        StateHasChanged();
        await _table.ReloadServerData();
    }

    private async Task DeleteAsync(string name)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowAsync<DeleteRoleDialog>("",
            new DialogParameters { { "RoleSlug", name } }, options);
    }

    private async Task CreateAsync()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowAsync<CreateRoleDialog>("", options);
    }

    private async Task EditAsync(string name, string slug)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowAsync<UpdateRoleDialog>("",
            new DialogParameters
            {
                {
                    "Command", new UpdateRoleCommand
                    {
                        Slug = slug,
                        NewRoleName = name
                    }
                }
            }, options);
    }

}