@page "/resetPassword"
@inject IUserProfileService UserProfileService
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IContentService ContentService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row" style="margin-top:20px;">
        <div Class="d-flex align-center justify-center mud-width-full py-8">

            <MudGrid>
                <MudItem xs="1" sm="3"></MudItem>
                <MudItem xs="12" sm="6">
                    <h4>@ContentService["SignIn:LinkReset"]</h4>
                    @if (!codeSent)
                    {
                        <EditForm Model="phoneNumberQuery" OnInvalidSubmit="SendCode">
                            <FluentValidationValidator/>
                            <MudCard>
                                <MudCardHeader></MudCardHeader>
                                <MudCardContent>
                                    <MudTextField Label="@ContentService["ResetPassword:PhoneNumber"]" @bind-Value="phoneNumberQuery.PhoneNumber" Variant="@Variant.Filled" Clearable
                                                  For="@(() => phoneNumberQuery.PhoneNumber)"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <ProgressTaskButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit"
                                                        Function="SendCode">
                                        <MudText>@ContentService["ResetPassword:Sendconfirmationcode"]</MudText>
                                    </ProgressTaskButton>
                                </MudCardActions>
                            </MudCard>
                        </EditForm>
                    }
                    @if (codeSent && !codeConfirm)
                    {
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <center>
                                        @* <MudText>UserName: <b>@userName</b></MudText> *@
                                    </center>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTextField Label="@ContentService["SignUp:Code"]" @bind-Value="code" Variant="@Variant.Filled" Clearable/>

                                <br/>
                                <br/>
                                <MudCardActions>

                                    <ProgressTaskButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Function="ConfirmCode">
                                        <MudText>@ContentService["SignUp:Apply"]</MudText>
                                    </ProgressTaskButton>
                                    <ProgressTaskButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" Function="SendCode" Disabled="@isResendDisabled">
                                        <MudText>@ContentService["ResetPassword:Resendcode"]</MudText>
                                    </ProgressTaskButton>

                                </MudCardActions>
                                <div>
                                    <MudText Typo="Typo.body2" Color="Color.Default">@timeLeft @ContentService["SignUp:Secconds"].</MudText>

                                </div>
                            </MudCardContent>


                        </MudCard>
                    }
                    @if (codeSent && codeConfirm)
                    {
                        <EditForm Model="model">
                            <FluentValidationValidator/>
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <center>
                                            @* 	<MudText>UserName: <b>@userName</b></MudText> *@
                                        </center>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField @bind-Value="@model.Password" Label="@ContentService["ResetPassword:NewPassword"]" Variant="Variant.Outlined"
                                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                                  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => model.Password)"/>
                                    <MudTextField @bind-Value="@model.ConfirmPassword" Label="@ContentService["SignUp:ConfirmPassword"]" Variant="Variant.Outlined"
                                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                                  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => model.ConfirmPassword)"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled"
                                               ButtonType="ButtonType.Submit" OnClick="SubmitNewPassword">
                                            <MudText> @ContentService["ResetPassword:Changepassword"]</MudText>
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </EditForm>
                    }
                </MudItem>
            </MudGrid>
        </div>
    </div>
</div>


@code {
    private IsAvailableUserPhoneNumberQuery phoneNumberQuery = new IsAvailableUserPhoneNumberQuery();
    private ResetPasswordCommand model = new ResetPasswordCommand();
    private bool codeSent = false;
    private bool codeConfirm = false;
    private bool isResendDisabled = true;
    private int timeLeft = 60;
    private int? code;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task SendCode()
    {
        try
        {
            var isAvailable = await AuthService.IsAvailableUserPhoneNumber(phoneNumberQuery);
            if (isAvailable.IsSuccessStatusCode)
            {
                if ((await isAvailable.Content.ReadFromJsonAsync<bool>()))
                {
                    Snackbar.Add(ContentService["Profile:Thisphonenumberisnotcorrect"],
                        Severity.Error);
                    return;
                }
            }

            bool response = await UserProfileService.SendConfirmationCode(phoneNumberQuery.PhoneNumber);
            if (response)
            {
                codeSent = true;
                isResendDisabled = true;
                timeLeft = 60;
                await StartCountdown();
            }
        }
        catch (Exception)
        {
            ServerNotResponding();
        }
    }

    private async Task ConfirmCode()
    {
        try
        {
            SmsVerificationCodeStatus response = await UserProfileService.CheckConfirmationCode(phoneNumberQuery.PhoneNumber, code);
            if (response == SmsVerificationCodeStatus.CodeVerifyFailure)
            {
                Snackbar.Add(ContentService["Profile:Codeisincorrector"], MudBlazor.Severity.Error);
            }
            else
            {
                codeConfirm = true;
            }
        }
        catch (Exception)
        {
            ServerNotResponding();
        }
    }

    private void ServerNotResponding()
    {
        Snackbar.Add(ContentService["Profile:Servernotrespondingtry"], MudBlazor.Severity.Error);
    }

    private async Task StartCountdown()
    {
        for (timeLeft = 60; timeLeft > 0; timeLeft--)
        {
            await Task.Delay(1000);
            StateHasChanged();
        }

        isResendDisabled = false;
    }


    private async Task SubmitNewPassword()
    {
        try
        {
            model.Code = code.HasValue ? code.Value : 0;
            model.PhoneNumber = phoneNumberQuery.PhoneNumber;
            var response = await AuthService.ResetPassword(model);

            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add((await response.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail);
                return;
            }

            Snackbar.Add(ContentService["Profile:Resetpasswordsuccessfully"], Severity.Success);
            NavigationManager.NavigateTo("login");
        }
        catch (Exception)
        {
            ServerNotResponding();
        }
    }

}