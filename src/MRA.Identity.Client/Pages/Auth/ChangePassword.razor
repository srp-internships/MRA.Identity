@using MRA.BlazorComponents.HttpClient.Responses
@using System.Net
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IContentService ContentService

<h3>@ContentService["ResetPassword:Changepassword"] </h3>
<br/>
<MudGrid>
    <MudItem xs="12" sm="12" md="8" lg="6">
        <EditForm Model="_command" OnInvalidSubmit="Submit">
            <FluentValidationValidator/>
            <MudCard Class="rounded-lg mud-evaluation-4">
                <MudCardContent>
                    <MudText>@ContentService["Profile:Tochangeyourpassword,enteryouroldpassword,andthencreateanew,strongpassword."]</MudText>
                    <MudTextField @bind-Value="@_command.OldPassword" Label="@ContentService["Profile:OldPassword"]" Variant="Variant.Outlined"
                                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                  OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" For="@(() => _command.OldPassword.Replace("OldPassword",ContentService["FltValidator:OldPassword"]))"/>
                    <MudTextField @bind-Value="@_command.NewPassword" Label="@ContentService["ResetPassword:NewPassword"]" Variant="Variant.Outlined"
                                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                  OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" For="@(() => _command.NewPassword.Replace("NewPassword", ContentService["FltValidator:NewPassword"]))"/>
                    <MudTextField @bind-Value="@_command.ConfirmPassword" Label="@ContentService["SignUp:ConfirmPassword"]" Variant="Variant.Outlined"
                                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                  OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" For="@(() => _command.ConfirmPassword.Replace("ConfirmPassword",ContentService["FltValidator:ConfirmPassword"]))"/>
                </MudCardContent>
                <MudCardActions>
                    <ProgressTaskButton Color="Color.Primary" Variant="Variant.Filled"
                                        ButtonType="ButtonType.Submit" OnClick="@Submit" FullWidth="true">
                        <MudText>@ContentService["ResetPassword:Changepassword"]</MudText>
                    </ProgressTaskButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>

@code {

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? false)
        {
            Navigation.NavigateTo("");
        }
    }

    ChangePasswordUserCommand _command = new();
    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task Submit()
    {
        var ok = await AuthService.ChangePassword(_command);
        if (ok)
        {
            Snackbar.Add(ContentService["ResetPassword:Changepasswordsuccessfully"], Severity.Success);
            _command = new ChangePasswordUserCommand();
        }

        StateHasChanged();
    }

}