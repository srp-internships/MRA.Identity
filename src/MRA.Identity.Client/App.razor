@using System.Runtime.InteropServices
@using FluentValidation
@using Microsoft.IdentityModel.Tokens
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {

    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] IConfiguration Configuration { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ContentService.InitializeCultureAsync();
        var lang = await LocalStorageService.GetItemAsStringAsync("ApplicationCulturesNames");
        if (lang.IsNullOrEmpty()) lang = Configuration["FeatureManagement:DefaultLanguage"];
        ValidatorOptions.Global.LanguageManager.Culture = lang switch
        {
            "Ru" => new CultureInfo(ApplicationCulturesNames.Ru),
            "En" => new CultureInfo(ApplicationCulturesNames.En),
            "Tj" => new CultureInfo(ApplicationCulturesNames.Tj),
            _ => ValidatorOptions.Global.LanguageManager.Culture
        };
    }

}