@page "/resetPassword"
@using System.Net
@inject IUserProfileService UserProfileService
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IContentService ContentService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row" style="margin-top:20px;">
        <div Class="d-flex align-center justify-center mud-width-full py-8">

            <MudGrid>
                <MudItem xs="1" sm="3"></MudItem>
                <MudItem xs="12" sm="6">
                    <h4>@ContentService["SignIn:LinkReset"]</h4>
                    @if (!_codeSent)
                    {
                        <EditForm Model="_phoneNumberQuery" OnValidSubmit="SendCode">
                            <FluentValidationValidator/>
                            <MudCard>
                                <MudCardHeader></MudCardHeader>
                                <MudCardContent>
                                    <MudTextField Label="@ContentService["ResetPassword:PhoneNumber"]" @bind-Value="_phoneNumberQuery.PhoneNumber" Variant="@Variant.Filled" Clearable
                                                  For="@(() => _phoneNumberQuery.PhoneNumber)"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <ProgressTaskButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit"
                                                        Function="SendCode">
                                        <MudText>@ContentService["ResetPassword:Sendconfirmationcode"]</MudText>
                                    </ProgressTaskButton>
                                </MudCardActions>
                            </MudCard>
                        </EditForm>
                    }
                    @if (_codeSent && !_codeConfirm)
                    {
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <center>
                                        @* <MudText>UserName: <b>@userName</b></MudText> *@
                                    </center>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTextField Label="@ContentService["SignUp:Code"]" @bind-Value="_code" Variant="@Variant.Filled" Clearable/>

                                <br/>
                                <br/>
                                <MudCardActions>

                                    <ProgressTaskButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="ConfirmCode">
                                        <MudText>@ContentService["SignUp:Apply"]</MudText>
                                    </ProgressTaskButton>
                                    <ProgressTaskButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" OnClick="SendCode" Disabled="@_isResendDisabled">
                                        <MudText>@ContentService["ResetPassword:Resendcode"]</MudText>
                                    </ProgressTaskButton>

                                </MudCardActions>
                                <div>
                                    <MudText Typo="Typo.body2" Color="Color.Default">@_timeLeft @ContentService["SignUp:Secconds"].</MudText>

                                </div>
                            </MudCardContent>


                        </MudCard>
                    }
                    @if (_codeSent && _codeConfirm)
                    {
                        <EditForm Model="_model">
                            <FluentValidationValidator/>
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <center>
                                            @* 	<MudText>UserName: <b>@userName</b></MudText> *@
                                        </center>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField @bind-Value="@_model.Password" Label="@ContentService["ResetPassword:NewPassword"]" Variant="Variant.Outlined"
                                                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                                  OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" For="@(() => _model.Password)"/>
                                    <MudTextField @bind-Value="@_model.ConfirmPassword" Label="@ContentService["SignUp:ConfirmPassword"]" Variant="Variant.Outlined"
                                                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                                  OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" For="@(() => _model.ConfirmPassword)"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled"
                                               ButtonType="ButtonType.Submit" OnClick="SubmitNewPassword">
                                        <MudText> @ContentService["ResetPassword:Changepassword"]</MudText>
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </EditForm>
                    }
                </MudItem>
            </MudGrid>
        </div>
    </div>
</div>


@code {
    private readonly IsAvailableUserPhoneNumberQuery _phoneNumberQuery = new();
    private readonly ResetPasswordCommand _model = new();
    private bool _codeSent;
    private bool _codeConfirm;
    private bool _isResendDisabled = true;
    private int _timeLeft = 60;
    private int? _code;
    bool _isShow;
    private InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task SendCode()
    {
        var isAvailable = await AuthService.IsAvailableUserPhoneNumber(_phoneNumberQuery);
        if (isAvailable)
        {
            Snackbar.Add(ContentService["Profile:Thisphonenumberisnotcorrect"],
                Severity.Error);
            return;
        }

        var response = await UserProfileService.SendConfirmationCode(_phoneNumberQuery.PhoneNumber);
        if (response)
        {
            _codeSent = true;
            _isResendDisabled = true;
            _timeLeft = 60;
            await StartCountdown();
        }
    }

    private async Task ConfirmCode()
    {
        var response = await UserProfileService.CheckConfirmationCode(_phoneNumberQuery.PhoneNumber, _code);
        if (response)
        {
            _codeConfirm = true;
        }
    }

    private async Task StartCountdown()
    {
        for (_timeLeft = 60; _timeLeft > 0; _timeLeft--)
        {
            await Task.Delay(1000);
            StateHasChanged();
        }

        _isResendDisabled = false;
    }


    private async Task SubmitNewPassword()
    {
        _model.Code = _code ?? 0;
        _model.PhoneNumber = _phoneNumberQuery.PhoneNumber;
        var response = await AuthService.ResetPassword(_model);
        if (response)
        {
            NavigationManager.NavigateTo("login");
        }
    }

}